# Copyright (c) 2022 Guilherme Janczak <guilherme.janczak@yandex.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

name: ' ' # empty name
on: [push, pull_request]

# GitHub Actions doesn't support YAML anchors, so the bit of code below is
# copypasted between jobs:
#
#      - uses: actions/checkout@v2.4.0
#      - name: build
#        run: |
#          meson setup -Dtest_system=true build
#          meson compile -C build
#      - name: test
#        run: meson test --no-suite system -C build
#      - name: test_system
#        run: meson test --suite system -C build || true
#      - uses: actions/upload-artifact@v2.3.1
#        if: failure()
#        with:
#          name: meson-logs
#          path: build/meson-logs

# You'll probably want to read the 'glibc:' task first, it's the one that
# requires the least hacks.
jobs:
  dietlibc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - name: setup
        run: |
          pip install meson
          sudo apt install -y ninja-build dietlibc-dev
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          CC='diet gcc' meson setup -Dtest_system=true \
                        -Ddefault_library=static build
          meson compile -C build
      - name: test
        run: meson test --no-suite system -C build
      - name: test_system
        run: meson test --suite system -C build || true
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: dietlibc-meson-logs
          path: build/meson-logs

  emscripten:
    runs-on: macos-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - name: setup
        run: |
          brew install meson samurai emscripten
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          meson setup -Ddefault_library=static -Dtest_system=true build \
              --cross-file .github/workflows/meson-emscripten.ini
          meson compile -C build
      - name: test
        run: meson test --no-suite system -C build
      - name: test_system
        run: meson test --suite system -C build || true
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: emscripten-meson-logs
          path: build/meson-logs

  glibc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - name: setup
        run: pip install meson ninja
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          meson setup -Dtest_system=true build
          meson compile -C build
      - name: test
        run: meson test --no-suite system -C build
      - name: test_system
        run: meson test --suite system -C build || true
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: glibc-meson-logs
          path: build/meson-logs

  haiku:
    runs-on: ubuntu-latest
    container: docker.io/hectormolinero/qemu-haiku:latest
    steps:
      # Copied from: https://github.com/hectorm/docker-qemu-haiku#github-actions
      # Notice I changed make to meson in the 'Install packages' step.
      - name: 'Wait until the VM is ready'
        run: 'container-init & timeout 600 vmshell exit 0'
      - name: 'Install packages'
        run: 'vmshell pkgman install -y meson gcc haiku_devel'
      - name: 'Checkout project'
        uses: 'actions/checkout@main'
      - name: 'Copy project to VM'
        run: 'vmshell mkdir ./src/; tar -cf - ./ | vmshell tar -xf - -C ./src/'
      # Now the rest is much of the same old.
      - name: build
        run: |
          vmshell meson setup -Dtest_system=true build src
          vmshell meson compile -C build
      - name: test
        run: vmshell meson test --no-suite system -C build
      - name: test_system
        run: vmshell meson test --suite system -C build || true
      - name: copy failure logs
        if: failure()
        run: |
          vmshell tar -cf - build/meson-logs | tar -xf -
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: haiku-meson-logs
          path: build/meson-logs

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - run: brew install meson samurai
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          meson setup -Dtest_system=true build
          meson compile -C build
      - name: test
        run: meson test --no-suite system -C build
      - name: test_system
        run: meson test --suite system -C build || true
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: macos-meson-logs
          path: build/meson-logs

  msys2:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        sys: [mingw64, mingw32, ucrt64, clang64, clang32]
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict
          install: pactoys
      - name: setup
        run: |
          # Lines stolen from:
          # https://github.com/msys2/MINGW-packages/blob/56dd3261b3e67c901e45f9314b671ea19104bc0e/.github/workflows/main.yml#L56-L63
          grep -qF '[clang32]' /etc/pacman.conf || sed -i '1s|^|[clang32]\nInclude = /etc/pacman.d/mirrorlist.mingw\n|' /etc/pacman.conf
          pacman --noconfirm -Suuy
          pacboy --noconfirm -S --needed clang:p meson:p ninja:p
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          meson setup -Dtest_system=true build
          meson compile -C build
      - name: test
        run: meson test --no-suite system -C build
      - name: test_system
        run: meson test --suite system -C build || true
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: ${{matrix.sys}}-meson-logs
          path: build/meson-logs

  MSYS:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          path-type: strict
          install: git gcc clang meson ninja
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          meson setup -Dtest_system=true build
          meson compile -C build
      - name: test
        run: meson test --no-suite system -C build
      - name: test_system
        run: meson test --suite system -C build || true
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: msys2-meson-logs
          path: build/meson-logs

  visual-studio:
    # Reference: https://dvdhrm.github.io/2021/04/21/meson-msvc-github-actions/
    runs-on: windows-latest
    strategy:
      matrix:
        uwp: [true, false]
    steps:
      - uses: actions/setup-python@v2.3.1
      - run: pip install meson ninja
      - uses: actions/checkout@v2.4.0
      - uses: ilammy/msvc-dev-cmd@v1.10.0
        with:
          uwp: ${{matrix.sys}}
          spectre: true
      - name: build
        run: |
          $env:Path += $env:VCINSTALLDIR + 'Tools\Llvm\bin;'
          $env:CC = 'clang-cl'
          meson setup -Dtest_system=true build
          meson compile -C build
      - name: test
        run: meson test --no-suite system -C build
      - name: test_system
        run: meson test --suite system -C build || true
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: vs-meson-logs
          path: build/meson-logs
