.\"	$OpenBSD: mdoc.template,v 1.15 2014/03/31 00:09:54 dlg Exp $
.\"
.\" Copyright (c) 2022 Guilherme Janczak <guilherme.janczak@yandex.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: April 13 2022 $
.Dt ARC4RANDOM 3
.Os
.Sh NAME
.Nm arc4random ,
.Nm arc4random_buf ,
.Nm arc4random_uniform
.Nd all-purpose random
.Sh SYNOPSIS
.In stdlib.h
.Ft uint32_t
.Fn arc4random "void"
.Ft void
.Fn arc4random_buf "void *buf" "size_t len"
.Ft uint32_t
.Fn arc4random_uniform "uint32_t less_than"
.Sh DESCRIPTION
The
.Fn arc4random ,
.Fn arc4random_buf , and
.Fn arc4random_uniform
functions return high quality random numbers with acceptable performance.
They never fail, block, or return low quality numbers.
The functions are thread-safe, chroot-safe,
and do not return the same results between the parent and child processes in a
.Fn fork .
.Sh RETURN VALUES
.Fn arc4random
returns a random number between 0 inclusive and UINT32_MAX inclusive.
.Pp
.Fn arc4random_buf
fills the object pointed to by
.Fa buf
with
.Fa len
random bytes.
.Pp
.Fn arc4random_uniform
returns a random number between 0 inclusive and
.Fa less_than
exclusive.
.Sh EXAMPLES
The
.Fn arc4random_uniform
function exists to avoid a problem known as
.Em modulo bias :
when the 1st argument of the modulo operator is a random number and the 2nd
is a number that cannot divide the RNG's largest possible return value plus
one,
some numbers are more likely to occur than others in the result.
In the case of
.Fn arc4random ,
any modulo operator second operand that is not a power of 2 causes modulo bias.
.Pp
Do not use the following construct to generate a number between 0 and 9:
.Bd -literal -offset indent
n = arc4random() % 10;
.Ed
.Pp
Instead, replace the modulo operator with
.Fn arc4random_uniform() :
.Bd -literal -offset indent
n = arc4random_uniform(10);
.Ed
.Pp
To generate a random number between 45 inclusive and 86 exclusive, use:
.Bd -literal -offset indent
n = 45 + arc4random_uniform(86-45);
.Ed
.Sh BUGS
Haiku OS lacks a cryptographic API; under Haiku OS,
these functions require access to
.Pa /dev/urandom .
